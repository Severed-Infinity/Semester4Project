package com.project.gui;

import com.project.constants.*;
import com.project.controller.*;

import javax.imageio.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.sql.*;
import java.text.*;

/**
 * The type Timetable login.
 */
@SuppressWarnings ("serial")
public final class TimetableLogin extends JFrame {
  /**
   * The Run statement.
   */
  private final RunStatementSelect runStatementSelect;
  /**
   * The User name.
   */
  private final JTextField userName;
  /**
   * The User password.
   */
  private final JPasswordField userPassword;
  /**
   * The Login.
   */
  private final JButton login;
  private final JButton /**
   * The Cancel.
   */
      cancel;

  /**
   * Instantiates a new Timetable login.
   */
  private TimetableLogin() {
    super();
    this.setTitle(StringConstants.LOGIN);
    this.setResizable(false);
    this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    this.setSize(250, 330);
    this.setLocationRelativeTo(null);
    final Container contentPane = this.getContentPane();
    contentPane.setBackground(Color.white);
    contentPane.setLayout(new GridBagLayout());
    final GridBagConstraints constraints = new GridBagConstraints();
    constraints.anchor = GridBagConstraints.FIRST_LINE_START;
    constraints.ipadx = 5;
    constraints.ipady = 5;

    /*
    The I tT logo.
   */
    Image iTTLogo = null;
    try {
      iTTLogo = ImageIO.read(this.getClass().getResource("/resources/IT-Tallaght-Logo.gif"));
    } catch (final IOException exception) {
      exception.printStackTrace();
    }
    final JLabel logo = new JLabel(new ImageIcon(iTTLogo));
    constraints.gridx = 0;
    constraints.gridy = 0;
    constraints.gridwidth = 2;
    constraints.fill = GridBagConstraints.BOTH;
    this.add(logo, constraints);
    constraints.insets = new Insets(0, 10, 0, 10);
    final JLabel loginLabel = new JLabel(StringConstants.USER_NAME);
    constraints.gridx = 0;
    constraints.gridy = 1;
    constraints.gridwidth = 2;
    constraints.fill = GridBagConstraints.HORIZONTAL;
    this.add(loginLabel, constraints);
    final JLabel passwordLabel = new JLabel(StringConstants.PASSWORD);
    constraints.gridx = 0;
    constraints.gridy = 3;
    constraints.gridwidth = 2;
    constraints.fill = GridBagConstraints.HORIZONTAL;
    this.add(passwordLabel, constraints);
    this.userName = new JFormattedTextField();
    constraints.gridx = 0;
    constraints.gridy = 2;
    constraints.gridwidth = 2;
    constraints.fill = GridBagConstraints.HORIZONTAL;
    this.add(this.userName, constraints);
    this.userPassword = new JPasswordField();
    constraints.gridx = 0;
    constraints.gridy = 5;
    constraints.gridwidth = 2;
    constraints.fill = GridBagConstraints.HORIZONTAL;
    // constraints.insets = new Insets( 5, 5, 5, 5 );
    this.add(this.userPassword, constraints);

        /*
         * creating the login action for the timetable system created by David
         * Swift
         */
    this.login = new JButton(StringConstants.LOGIN);
    this.login.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(final ActionEvent actionEvent) {
        try {
          TimetableLogin.this.login();
        } catch (final SQLException exception) {
          exception.printStackTrace();
        }
        TimetableLogin.this.query();
      }
    });
    constraints.gridx = 0;
    constraints.gridy = 6;
    constraints.gridwidth = 1;
    constraints.weightx = 1.0;
    constraints.fill = GridBagConstraints.HORIZONTAL;
    constraints.insets = new Insets(10, 10, 10, 5);
    this.add(this.login, constraints);
    this.cancel = new JButton(StringConstants.CANCEL);
    this.cancel.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(final ActionEvent actionEvent) {
        System.exit(0);
      }
    });
    constraints.gridx = 1;
    constraints.gridy = 6;
    constraints.gridwidth = 1;
    constraints.fill = GridBagConstraints.HORIZONTAL;
    constraints.insets = new Insets(10, 0, 10, 10);
    this.add(this.cancel, constraints);
    this.pack();
    this.runStatementSelect = RunStatementSelect
        .createRunStatementSelect();
  }

  /**
   * Query void.
   */
  void query() {
    this.runStatementSelect.querySchool();
    this.runStatementSelect.queryDepartment();
    this.runStatementSelect.queryCourse();
    this.runStatementSelect.queryTimetables();
    this.runStatementSelect.queryClassPeriod();
    this.runStatementSelect.queryCourseModule();
    this.runStatementSelect.queryModule();
    this.runStatementSelect.queryModuleLecturer();
    this.runStatementSelect.queryRoom();
    this.runStatementSelect.queryLecturers();
    //        runStatementSelect.queryUsers(databaseConnection.getDatabaseConnection());
  }

  /**
   * Login void.
   */
  void login() throws SQLException {
    final DatabaseConnection connection = DatabaseConnection.createDatabaseConnection();
    RunStatementSelect.createRunStatementSelect().setConnection(connection.createConnection(
        this.userName.getText(), String.valueOf(this.userPassword.getPassword())));
    //    RunStatementSelect.createRunStatementSelect().queryUsers();
    if () {
      JOptionPane.showMessageDialog(null, "No connection detected", null,
          JOptionPane.WARNING_MESSAGE, null);
    } else {
      final MainWindow mainWindow = new MainWindow(connection, DatabaseConnection.userExists);
      mainWindow.setVisible(true);
      this.dispose();
    }

  }

  public static TimetableLogin createTimetableLogin() {return new TimetableLogin();}

  @Override
  public String toString() {
    return MessageFormat.format(
        "TimetableLogin'{'runStatementSelect={0}, databaseConnection={1}, userName={2}, " +
            "userPassword={3}, login={4}, cancel={5}'}'",
        this.runStatementSelect, this.userName, this.userPassword,
        this.login,
        this.cancel
    );
  }
}
